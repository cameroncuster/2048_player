*  Choose a name for the player (put a Name file in your repo)
*  Code compiles
*  Code runs and plays the game
*  Player averages better than the random player
*  Player averages better than the greedy player
-  All team members show repository activity
--------------------------------------------------------------------------------
Total % : 5/5  commit [c4c518adc291] used

Notes:

   * Making one simple change does not meet the requirement
     of 'All team members show repository activity'.  Make sure both team
     members are contributing
    
   * If the team is doing paired or team programming, that must be documented
     in the commit logs.

   * Projects do not, necessarily, require that all team members receive the
     same grade.  I reserve the right to assign different grades for each
     member of a team.

   * Player is working so far, so good, keep an eye on the upcoming 
     checkpoint requirements and the performance of the greedy player as it
     will improve over time.

   * Your player takes a lot of time per turn, you're currently under the 
     wire (when run on an Opp Lab machine) but make sure you're keeping an
     eye on that.

--------------------------------------------------------------------------------
Checkpoint 2:

  All requirements from Checkpoint 1 (no regressions).  Greedy is getting better
  Writeup describing your algorithm / method of play (1-2 paragraphs)
  Player averages 10% better than <b>your</b> checkpoint 1 player
  All team members show significant repository activity

Potential deductions for final submission
  Unnecessary / incorrect files in the repository (binary, object, editor swap)
  Memory leaks
  Console spam
--------------------------------------------------------------------------------
Total % : 5/5  commit [61ddc11f817] used

Notes:
   
   * Just (barely) staying ahead of Greedy player

   * Still not equal activity in the repository, make sure you're indicating
     if there is paired or team programming going on.

   * Don't rest on your player, see if you can increase the average / maximum
     or turn per score values this week!  Greedy gets a big upgrade this week.

   * Also, make sure you go through and clean up the code to make the coding
     standard consistent, the code modular and readable.

   * Your player takes a lot of time per turn given the scores it's producing.
     Maybe go back and start with a more simple model and really understand
     what things impact scores.  A mini-max method is usually aimed at a
     two player game, which this is not.

-------------------------------------------------------------------------------
Final Review:

   * Your final player made a big improvement after checkpoint 2, it appears
     there was a radical re-write late in the game.

   * Your writeup/log seems to indicate you did some thought about various
     ways to increase scores.  The idea that a better objective function
     could be the key to higher scores is correct.  One intuition concerning
     recursively searching for further and further future boards would be
     that the deeper the board, the less likely it would ever be encountered

   * Not good internal documentation including function headers.  If you ever
     return to the project you will not have the least idea as to what you
     were doing / hoping to accomplish and how you believed that that would
     be realized.

   * All-in-all a decent job in the end but it appeared to be a rocky road.

   * I hope this project helped you get better at the basic task of
     turning an idea into functional code.  One of the major goals of this
     course.

   * The disproportionate effort apparent in the git commit logs will cause
     the two team members to receive different grades.  Team projects are
     just that, meant to be accomplished by working in a team.

Player               :  +2%
Checkpoint deduct    :   0%
Documentation        : -10%  (internal)
---------------------------
Total Score          :  92%
